With
Ada.Unchecked_Conversion,
Ada.IO_Exceptions;

Package Body NSO.Types.String_Stream is
    Use Ada.Streams;

    Procedure Read
      (Stream : in out String_Stream;
       Item   :    out Ada.Streams.Stream_Element_Array;
       Last   :    out Ada.Streams.Stream_Element_Offset) is
        Use Ada.IO_Exceptions, Ada.Streams;
    Begin
        if Item'Length = 0 then
            null;
        elsif Item'Length > Stream.Data'Length then
            Raise End_Error with "Request is larger than the buffer's size.";
        elsif Stream_Element_Offset'Pred(Stream.Position)+Item'Length > Stream.Data'Length then
            Raise End_Error with "Buffer will over-read.";
        else
            Declare
                Subtype Selection is Stream_Element_Offset range
                  Stream.Position..Stream.Position+Stream_Element_Offset'Pred(Item'Length);
            Begin
                Item(Item'Range):= Stream.Data(Selection);
                Stream.Position:= Stream_Element_Offset'Succ(Selection'Last);
                Last:= Selection'Last;--Stream.Position;
            End;
        end if;
    End Read;

    Procedure Write
      (Stream : in out String_Stream;
       Item   :        Ada.Streams.Stream_Element_Array) is
    Begin
        Declare
            Subtype Selection is Stream_Element_Offset range
              Stream.Position..Stream.Position+Stream_Element_Offset'Pred(Item'Length);
        Begin
            Stream.Data(Selection):= Item(Item'Range);
            Stream.Position:= Stream_Element_Offset'Succ(Selection'Last);
        End;
    End Write;

    Function From_String( Text : String ) return String_Stream is
        Use Ada.Streams;

        Pragma Assert( Stream_Element'Size = String'Component_Size );

        Subtype Element_Range is Stream_Element_Offset range
          Stream_Element_Offset(Text'First)..Stream_Element_Offset(Text'Last);
        Subtype Constrained_Array  is Stream_Element_Array(Element_Range);
        Subtype Constrained_String is String(Text'Range);

        Function Convert is new Ada.Unchecked_Conversion(
           Source => Constrained_Array,
           Target => Constrained_String
          );

        Function Convert is new Ada.Unchecked_Conversion(
           Source => Constrained_String,
           Target => Constrained_Array
          );
    Begin
        Return Result : Constant String_Stream:=
          (Root_Stream_Type with
           Position => Element_Range'First,
           Data     => Convert( Text ),
           Length   => Text'Length
          );
    End From_String;

    Function Buffer( Length : Natural ) return String_Stream is
        Len : Constant Ada.Streams.Stream_Element_Offset :=
          Ada.Streams.Stream_Element_Offset(Length);
    Begin
        Return Result : Constant String_Stream:=
          (Root_Stream_Type with
           Position =>  1,
           Data     => (1..Len => 0),
           Length   =>  Len
          );
    End Buffer;

    Function To_Stream( Text : String ) return Ada.Streams.Root_Stream_Type'Class is
        ( From_String(Text));

    Function To_Stream( Length : Natural ) return Ada.Streams.Root_Stream_Type'Class is
    Begin
        --              Return Result : Constant Ada.Streams.Root_Stream_Type'Class:= +Length;
        Return Object : Constant String_Stream := Buffer(Length);
    end To_Stream;

    Function "+"( Length : Natural ) return not null access Ada.Streams.Root_Stream_Type'Class is
      ( new Ada.Streams.Root_Stream_Type'Class'( To_Stream(Length) ) );

    Function "+"( Text : String ) return not null access Ada.Streams.Root_Stream_Type'Class is
    Begin
        return new Ada.Streams.Root_Stream_Type'Class'(To_Stream(Text));
    End "+";
    --( new Ada.Streams.Root_Stream_Type'Class'(To_Stream(Text)) );

    Function "+"( Text   : String  ) return String_Stream renames From_String;
    Function "+"( Length : Natural ) return String_Stream renames Buffer;
End NSO.Types.String_Stream;
